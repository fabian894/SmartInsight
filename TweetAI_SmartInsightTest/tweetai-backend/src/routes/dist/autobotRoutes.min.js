"use strict";function _slicedToArray(e,r){return _arrayWithHoles(e)||_iterableToArrayLimit(e,r)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function _iterableToArrayLimit(e,r){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)){var t=[],o=!0,n=!1,a=void 0;try{for(var s,u=e[Symbol.iterator]();!(o=(s=u.next()).done)&&(t.push(s.value),!r||t.length!==r);o=!0);}catch(e){n=!0,a=e}finally{try{o||null==u.return||u.return()}finally{if(n)throw a}}return t}}function _arrayWithHoles(e){if(Array.isArray(e))return e}var express=require("express"),router=express.Router(),autobotService=require("../services/autobotService");router.get("/autobots",function(e,r){var t,o,n;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,regeneratorRuntime.awrap(pool.query("SELECT * FROM Autobots"));case 3:t=e.sent,o=_slicedToArray(t,1),n=o[0],r.json(n),e.next=13;break;case 9:e.prev=9,e.t0=e.catch(0),console.error("Error fetching Autobots:",e.t0),r.status(500).json({error:"Failed to fetch Autobots"});case 13:case"end":return e.stop()}},null,null,[[0,9]])}),router.get("/autobots/count",function(e,r){var t,o,n;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,regeneratorRuntime.awrap(pool.query("SELECT COUNT(*) AS count FROM Autobots"));case 3:t=e.sent,o=_slicedToArray(t,1),n=o[0],r.json({count:n[0].count}),e.next=13;break;case 9:e.prev=9,e.t0=e.catch(0),console.error("Error fetching Autobots count:",e.t0),r.status(500).json({error:"Failed to fetch Autobots count"});case 13:case"end":return e.stop()}},null,null,[[0,9]])}),router.get("/test-db",function(e,r){var t,o,n;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,regeneratorRuntime.awrap(pool.query("SELECT 1 + 1 AS solution"));case 3:t=e.sent,o=_slicedToArray(t,1),n=o[0],r.json({result:n[0].solution}),e.next=13;break;case 9:e.prev=9,e.t0=e.catch(0),console.error("Database connection failed:",e.t0),r.status(500).json({error:"Database connection failed"});case 13:case"end":return e.stop()}},null,null,[[0,9]])}),module.exports=router;
//# sourceMappingURL=autobotRoutes.min.js.map
