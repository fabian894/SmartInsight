{"version":3,"sources":["autobotRoutes.js"],"names":["express","require","router","Router","get","req","res","_ref","_ref2","autobots","regeneratorRuntime","async","_context","prev","next","awrap","pool","query","sent","_slicedToArray","json","t0","console","error","status","stop","_ref3","_ref4","result","_context2","count","_ref5","_ref6","rows","_context3","solution","module","exports"],"mappings":"mnBAiCA,IAAAA,QAAAC,QAAA,WAEAC,OAAAF,QAAAG,SAEMH,eAAkBC,QAAD,8BAKvBC,OAAOE,IAAI,YAAa,SAAOC,EAAKC,GAAZ,IAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAK,MAEKC,KAAKC,MAAM,2BAFhB,KAAA,EAAAV,EAAAK,EAAAM,KAAAV,EAAAW,eAAAZ,EAAA,GAEbE,EAFaD,EAAA,GAGpBF,EAAIc,KAAKX,GAHWG,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAAF,EAAAC,KAAA,EAAAD,EAAAS,GAAAT,EAAA,MAAA,GAAAU,QAAAC,MAAA,2BAAAX,EAAAS,IAMpBf,EAAIkB,OAAO,KAAKJ,KAAK,CAAEG,MAAO,6BANV,KAAA,GAAA,IAAA,MAAA,OAAAX,EAAAa,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAAAvB,OAAAE,IAAA,kBAAA,SAAAC,EAAAC,GAAA,IAAAoB,EAAAC,EAAAC,EAAA,OAAAlB,mBAAAC,MAAA,SAAAkB,GAAA,OAAA,OAAAA,EAAAhB,KAAAgB,EAAAf,MAAA,KAAA,EAAA,OAAAe,EAAAhB,KAAA,EAAAgB,EAAAf,KAAA,EAAAJ,mBAAAK,MAAAC,KAAAC,MAAA,2CAAA,KAAA,EAAAS,EAAAG,EAAAX,KAAAS,EAAAR,eAAAO,EAAA,GAAAE,EAAAD,EAAA,GAcpBrB,EAAIc,KAAK,CAAEU,MAAOF,EAAO,GAAGE,QAdRD,EAAAf,KAAA,GAAA,MAAA,KAAA,EAAAe,EAAAhB,KAAA,EAAAgB,EAAAR,GAAAQ,EAAA,MAAA,GAAAP,QAAAC,MAAA,iCAAAM,EAAAR,IAAAf,EAAAkB,OAAA,KAAAJ,KAAA,CAAAG,MAAA,mCAAA,KAAA,GAAA,IAAA,MAAA,OAAAM,EAAAJ,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAAAvB,OAAAE,IAAA,WAAA,SAAAC,EAAAC,GAAA,IAAAyB,EAAAC,EAAAC,EAAA,OAAAvB,mBAAAC,MAAA,SAAAuB,GAAA,OAAA,OAAAA,EAAArB,KAAAqB,EAAApB,MAAA,KAAA,EAAA,OAAAoB,EAAArB,KAAA,EAAAqB,EAAApB,KAAA,EAAAJ,mBAAAK,MAAAC,KAAAC,MAAA,6BAAA,KAAA,EAAAc,EAAAG,EAAAhB,KAAAc,EAAAb,eAAAY,EAAA,GAAAE,EAAAD,EAAA,GAAA1B,EAAAc,KAAA,CAAAQ,OAAAK,EAAA,GAAAE,WAAAD,EAAApB,KAAA,GAAA,MAAA,KAAA,EAAAoB,EAAArB,KAAA,EAAAqB,EAAAb,GAAAa,EAAA,MAAA,GAKpBZ,QAAAA,MAAQC,8BAARD,EAAAA,IACAhB,EAAAA,OAAIkB,KAAJJ,KAAA,CAAgBA,MAAK,+BAND,KAAA,GAAA,IAAA,MAAA,OAAAc,EAAAT,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAAAW,OAAAC,QAAAnC","file":"autobotRoutes.min.js","sourcesContent":["// const express = require('express');\r\n// const router = express.Router();\r\n// const pool = require('../utils/db');\r\n// const autobotsController = require('../controllers/autobotsController');\r\n\r\n\r\n// router.get('/api/autobots/count', autobotsController.getAutobotCount);\r\n\r\n// // Route to get the current count of Autobots\r\n// router.get('/autobot-count', async (req, res) => {\r\n//   try {\r\n//     const [rows] = await pool.query('SELECT COUNT(*) AS count FROM Autobots');\r\n//     res.json({ count: rows[0].count });\r\n//   } catch (error) {\r\n//     res.status(500).json({ error: 'Error fetching autobot count' });\r\n//   }\r\n// });\r\n\r\n// module.exports = router;\r\n\r\n// const express = require('express');\r\n// const router = express.Router();\r\n// const autobotService = require('../services/autobotService');\r\n\r\n// // Route to get the count of Autobots\r\n// router.get('/autobots/count', async (req, res) => {\r\n//   try {\r\n//     const count = await autobotService.getAutobotCount();\r\n//     res.json({ count });\r\n//   } catch (error) {\r\n//     console.error('Error fetching Autobot count:', error);\r\n//     res.status(500).json({ error: 'Failed to fetch Autobot count' });\r\n//   }\r\n// });\r\n\r\n// module.exports = router;\r\n\r\nconst express = require('express');\r\nconst router = express.Router();\r\nconst autobotService = require('../services/autobotService');\r\n\r\n// Route to get all Autobots\r\nrouter.get('/autobots', async (req, res) => {\r\n  try {\r\n    const [autobots] = await pool.query('SELECT * FROM Autobots');\r\n    res.json(autobots);\r\n  } catch (error) {\r\n    console.error('Error fetching Autobots:', error);\r\n    res.status(500).json({ error: 'Failed to fetch Autobots' });\r\n  }\r\n});\r\n\r\n// Route to get the count of Autobots\r\nrouter.get('/autobots/count', async (req, res) => {\r\n  try {\r\n    const [result] = await pool.query('SELECT COUNT(*) AS count FROM Autobots');\r\n    res.json({ count: result[0].count });\r\n  } catch (error) {\r\n    console.error('Error fetching Autobots count:', error);\r\n    res.status(500).json({ error: 'Failed to fetch Autobots count' });\r\n  }\r\n});\r\n\r\nrouter.get('/test-db', async (req, res) => {\r\n  try {\r\n    const [rows] = await pool.query('SELECT 1 + 1 AS solution');\r\n    res.json({ result: rows[0].solution });\r\n  } catch (error) {\r\n    console.error('Database connection failed:', error);\r\n    res.status(500).json({ error: 'Database connection failed' });\r\n  }\r\n});\r\n\r\n\r\nmodule.exports = router;\r\n\r\n\r\n"]}