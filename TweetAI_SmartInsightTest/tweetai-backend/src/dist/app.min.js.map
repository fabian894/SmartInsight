{"version":3,"sources":["app.js"],"names":["require","config","express","app","pool","autobotService","use","autobotRoutes","res","send","req","_ref","_ref2","rows","regeneratorRuntime","async","_context","prev","next","awrap","query","sent","_slicedToArray","json","result","solution","t0","error","stop","PORT","process","env","listen","console","log","concat"],"mappings":"mnBAOAA,QAAA,UAAAC,SAGA,IAAAC,QAAAF,QAAA,WACAG,IAAAD,UACAE,KAAAJ,QAAA,cACAK,eAAAL,QAAA,6BAEAA,cAAkBC,QAAlB,0BAEAE,IAAMD,IAAAA,QAAUF,QAShBG,IAAIG,IAAI,OAAQC,eANhBJ,IAAME,IAAAA,IAAAA,SAAAA,EAAcG,GAUlBA,EAAIC,KAAK,gCAPXN,IAAIG,IAAIJ,WAAA,SAERQ,EAAAF,GAFQ,IAAAG,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAK,MAGQZ,KAAhBa,MAEA,6BALQ,KAAA,EAAAT,EAAAK,EAAAK,KAAAT,EAAAU,eAAAX,EAAA,GAGAE,EAHAD,EAAA,GAaJJ,EAAIe,KAAK,CAAEC,OAAQX,EAAK,GAAGY,WAbvBT,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAAF,EAAAC,KAAA,EAAAD,EAAAU,GAAAV,EAAA,MAAA,GAONR,EAAIC,OAAK,KAAAc,KAAA,CAAAI,MAAA,+BAPH,KAAA,GAAA,IAAA,MAAA,OAAAX,EAAAY,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAmBR,IAAMC,KAAOC,QAAQC,IAAIF,MAAQ,IATb1B,IAAA6B,OAAAH,KAAA,WAAAI,QAAAC,IAAA,6BAAAC,OAAAN","file":"app.min.js","sourcesContent":["// const express = require('express');\r\n// const app = express();\r\n\r\n// app.use(express.json());\r\n\r\n// // Basic route to verify the server is running\r\n// app.get('/', (req, res) => {\r\n//   res.send('TweetAI Backend is running');\r\n// });\r\n\r\n// const PORT = process.env.PORT || 3000;\r\n// app.listen(PORT, () => {\r\n//   console.log(`Server is running on port ${PORT}`);\r\n// });\r\n\r\nrequire('dotenv').config();\r\n\r\nconst express = require('express');\r\nconst app = express();\r\nconst pool = require('./utils/db'); \r\nconst autobotService = require('./services/autobotService');\r\nconst autobotRoutes = require('./routes/autobotRoutes');\r\n\r\napp.use(express.json());\r\n\r\n//app.use('/api', autobotService);\r\napp.use('/api', autobotRoutes);\r\n\r\n// verify the server is running\r\napp.get('/', (req, res) => {\r\n  res.send('TweetAI Backend is running');\r\n});\r\n\r\napp.get('/test-db', async (req, res) => {\r\n  try {\r\n    const [rows] = await pool.query('SELECT 1 + 1 AS solution');\r\n    res.json({ result: rows[0].solution });\r\n  } catch (error) {\r\n    res.status(500).json({ error: 'Database connection failed' });\r\n  }\r\n});\r\n\r\nconst PORT = process.env.PORT || 3000;\r\napp.listen(PORT, () => {\r\n  console.log(`Server is running on port ${PORT}`);\r\n});\r\n"]}