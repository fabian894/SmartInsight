{"version":3,"sources":["autobotService.js"],"names":["axios","require","pool","cron","crypto","getAutobotCount","_ref","_ref2","rows","regeneratorRuntime","async","_context","prev","next","awrap","query","sent","_slicedToArray","abrupt","count","t0","console","error","stop","createAutobot","_ref3","users","user","uniqueEmail","uniqueUsername","_ref4","_ref5","result","autobotId","_context2","get","Math","floor","random","length","email","randomBytes","toString","username","name","insertId","createPostsForAutobot","_ref6","posts","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","post","uniqueTitle","_ref7","_ref8","postResult","postId","_context3","data","undefined","Symbol","iterator","done","value","title","body","createCommentsForPost","finish","t1","_ref9","comments","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","comment","_context4","schedule","i","_context5","log","module","exports"],"mappings":"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","file":"autobotService.min.js","sourcesContent":["const axios = require('axios');\r\nconst pool = require('../utils/db');\r\nconst cron = require('node-cron');\r\nconst crypto = require('crypto');\r\n\r\n// Function to get the count of Autobots\r\nasync function getAutobotCount() {\r\n  try {\r\n    const [rows] = await pool.query('SELECT COUNT(*) AS count FROM Autobots');\r\n    return rows[0].count;\r\n  } catch (error) {\r\n    console.error('Error getting Autobot count:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Function to create an Autobot\r\nasync function createAutobot() {\r\n  try {\r\n    const { data: users } = await axios.get('https://jsonplaceholder.typicode.com/users');\r\n    \r\n    // Generate unique values\r\n    const user = users[Math.floor(Math.random() * users.length)]; // Randomly pick a user\r\n    const uniqueEmail = user.email + '.' + crypto.randomBytes(4).toString('hex'); // Ensure unique email\r\n    const uniqueUsername = user.username + '_' + crypto.randomBytes(4).toString('hex'); // Ensure unique username\r\n    \r\n    const [result] = await pool.query(\r\n      'INSERT INTO Autobots (name, email, username) VALUES (?, ?, ?)',\r\n      [user.name, uniqueEmail, uniqueUsername]\r\n    );\r\n\r\n    const autobotId = result.insertId;\r\n\r\n    // Create 10 posts for the new Autobot\r\n    await createPostsForAutobot(autobotId);\r\n\r\n  } catch (error) {\r\n    console.error('Error creating Autobot:', error);\r\n  }\r\n}\r\n\r\n// Function to create posts for a specific Autobot\r\nasync function createPostsForAutobot(autobotId) {\r\n  try {\r\n    const { data: posts } = await axios.get('https://jsonplaceholder.typicode.com/posts');\r\n    \r\n    for (const post of posts) {\r\n      const uniqueTitle = post.title + '_' + crypto.randomBytes(4).toString('hex'); \r\n\r\n      const [postResult] = await pool.query(\r\n        'INSERT INTO Posts (autobot_id, title, body) VALUES (?, ?, ?)',\r\n        [autobotId, uniqueTitle, post.body]\r\n      );\r\n\r\n      const postId = postResult.insertId;\r\n\r\n      // Create 10 comments for each post\r\n      await createCommentsForPost(postId);\r\n    }\r\n  } catch (error) {\r\n    console.error('Error creating posts:', error);\r\n  }\r\n}\r\n\r\n// Function to create comments for a specific post\r\nasync function createCommentsForPost(postId) {\r\n  try {\r\n    const { data: comments } = await axios.get('https://jsonplaceholder.typicode.com/comments');\r\n    \r\n    for (const comment of comments) {\r\n      await pool.query(\r\n        'INSERT INTO Comments (post_id, name, email, body) VALUES (?, ?, ?, ?)',\r\n        [postId, comment.name, comment.email, comment.body]\r\n      );\r\n    }\r\n  } catch (error) {\r\n    console.error('Error creating comments:', error);\r\n  }\r\n}\r\n\r\n// Schedule a task to run every hour to create 500 Autobots\r\ncron.schedule('0 * * * *', async () => {\r\n  try {\r\n    for (let i = 0; i < 500; i++) {\r\n      await createAutobot();\r\n    }\r\n    console.log('500 Autobots created successfully!');\r\n  } catch (error) {\r\n    console.error('Error in scheduled task:', error);\r\n  }\r\n});\r\n// Schedule a task to run every minute to create 500 Autobots\r\n// cron.schedule('* * * * *', async () => {\r\n//   for (let i = 0; i < 500; i++) {\r\n//     await createAutobot();\r\n//   }\r\n//   console.log('500 Autobots created successfully!');\r\n// });\r\n\r\n\r\nmodule.exports = { getAutobotCount };\r\n"]}