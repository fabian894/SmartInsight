{"version":3,"sources":["autobotService.js"],"names":["axios","require","pool","cron","crypto","getAutobotCount","query","rows","count","console","error","createAutobot","get","users","data","user","Math","floor","random","length","uniqueEmail","email","randomBytes","toString","uniqueUsername","username","name","result","autobotId","insertId","createPostsForAutobot","posts","post","uniqueTitle","title","body","postResult","postId","createCommentsForPost","comments","comment","schedule","i","log","module","exports"],"mappings":"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","sourcesContent":["const axios = require('axios');\r\nconst pool = require('../utils/db');\r\nconst cron = require('node-cron');\r\nconst crypto = require('crypto');\r\n\r\n// Function to get the count of Autobots\r\nasync function getAutobotCount() {\r\n  try {\r\n    const [rows] = await pool.query('SELECT COUNT(*) AS count FROM Autobots');\r\n    return rows[0].count;\r\n  } catch (error) {\r\n    console.error('Error getting Autobot count:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Function to create an Autobot\r\nasync function createAutobot() {\r\n  try {\r\n    const { data: users } = await axios.get('https://jsonplaceholder.typicode.com/users');\r\n    \r\n    // Generate unique values\r\n    const user = users[Math.floor(Math.random() * users.length)]; // Randomly pick a user\r\n    const uniqueEmail = user.email + '.' + crypto.randomBytes(4).toString('hex'); // Ensure unique email\r\n    const uniqueUsername = user.username + '_' + crypto.randomBytes(4).toString('hex'); // Ensure unique username\r\n    \r\n    const [result] = await pool.query(\r\n      'INSERT INTO Autobots (name, email, username) VALUES (?, ?, ?)',\r\n      [user.name, uniqueEmail, uniqueUsername]\r\n    );\r\n\r\n    const autobotId = result.insertId;\r\n\r\n    // Create 10 posts for the new Autobot\r\n    await createPostsForAutobot(autobotId);\r\n\r\n  } catch (error) {\r\n    console.error('Error creating Autobot:', error);\r\n  }\r\n}\r\n\r\n// Function to create posts for a specific Autobot\r\nasync function createPostsForAutobot(autobotId) {\r\n  try {\r\n    const { data: posts } = await axios.get('https://jsonplaceholder.typicode.com/posts');\r\n    \r\n    for (const post of posts) {\r\n      const uniqueTitle = post.title + '_' + crypto.randomBytes(4).toString('hex'); \r\n\r\n      const [postResult] = await pool.query(\r\n        'INSERT INTO Posts (autobot_id, title, body) VALUES (?, ?, ?)',\r\n        [autobotId, uniqueTitle, post.body]\r\n      );\r\n\r\n      const postId = postResult.insertId;\r\n\r\n      // Create 10 comments for each post\r\n      await createCommentsForPost(postId);\r\n    }\r\n  } catch (error) {\r\n    console.error('Error creating posts:', error);\r\n  }\r\n}\r\n\r\n// Function to create comments for a specific post\r\nasync function createCommentsForPost(postId) {\r\n  try {\r\n    const { data: comments } = await axios.get('https://jsonplaceholder.typicode.com/comments');\r\n    \r\n    for (const comment of comments) {\r\n      await pool.query(\r\n        'INSERT INTO Comments (post_id, name, email, body) VALUES (?, ?, ?, ?)',\r\n        [postId, comment.name, comment.email, comment.body]\r\n      );\r\n    }\r\n  } catch (error) {\r\n    console.error('Error creating comments:', error);\r\n  }\r\n}\r\n\r\n// Schedule a task to run every hour to create 500 Autobots\r\ncron.schedule('0 * * * *', async () => {\r\n  try {\r\n    for (let i = 0; i < 500; i++) {\r\n      await createAutobot();\r\n    }\r\n    console.log('500 Autobots created successfully!');\r\n  } catch (error) {\r\n    console.error('Error in scheduled task:', error);\r\n  }\r\n});\r\n// Schedule a task to run every minute to create 500 Autobots\r\n// cron.schedule('* * * * *', async () => {\r\n//   for (let i = 0; i < 500; i++) {\r\n//     await createAutobot();\r\n//   }\r\n//   console.log('500 Autobots created successfully!');\r\n// });\r\n\r\n\r\nmodule.exports = { getAutobotCount };\r\n"],"file":"autobotService.dev.js"}