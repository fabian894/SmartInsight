"use strict";function _slicedToArray(r,t){return _arrayWithHoles(r)||_iterableToArrayLimit(r,t)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function _iterableToArrayLimit(r,t){if(Symbol.iterator in Object(r)||"[object Arguments]"===Object.prototype.toString.call(r)){var e=[],n=!0,o=!1,a=void 0;try{for(var i,u=r[Symbol.iterator]();!(n=(i=u.next()).done)&&(e.push(i.value),!t||e.length!==t);n=!0);}catch(r){o=!0,a=r}finally{try{n||null==u.return||u.return()}finally{if(o)throw a}}return e}}function _arrayWithHoles(r){if(Array.isArray(r))return r}var pool=require("../utils/db");exports.getAutobotCount=function(r,t){var e,n,o;return regeneratorRuntime.async(function(r){for(;;)switch(r.prev=r.next){case 0:return r.prev=0,r.next=3,regeneratorRuntime.awrap(pool.query("SELECT COUNT(*) AS count FROM Autobots"));case 3:e=r.sent,n=_slicedToArray(e,1),o=n[0],t.json({count:o[0].count}),r.next=13;break;case 9:r.prev=9,r.t0=r.catch(0),console.error("Error fetching autobot count:",r.t0),t.status(500).json({error:"Internal server error"});case 13:case"end":return r.stop()}},null,null,[[0,9]])};
//# sourceMappingURL=autobotsController.min.js.map
